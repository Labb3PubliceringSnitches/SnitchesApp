@using Newtonsoft.Json;
@using SnitchesApp.Models;
@using static SnitchesApp.Pages.Index;
@inject HttpClient client;

<MudSelect T="string" Label="Städer (Kan lämnas tom)" Class="custom-select" MultiSelection="true" @bind-Value="valueCity" @bind-SelectedValues="optionsCity">

    @foreach (var state in swedishCities)
    {
        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
    }
</MudSelect>

<MudSelect T="string" Label="Typ av brott (Kan lämnas tom)" MultiSelection="true" @bind-Value="valueType" @bind-SelectedValues="optionsType">
    @foreach (var state in typeOfCrimes)
    {
        <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
    }
</MudSelect>





<MudGrid>
    <MudItem Class="d-flex">
        <MudButton Variant="Variant.Filled" Disabled="@_processing" Class="my-3" @onclick="GettingAllCrimesFromSelectedCities">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2 whitespace-nowrap">Hämtar brotten</MudText>
            }
            else
            {
                <MudText Class="whitespace-nowrap">Sök efter brott</MudText>
            }
        </MudButton>
        <MudButton Variant="Variant.Filled" Class="my-3 ms-3 justify-end" Disabled="@(_processing || (optionsCity.Count() == 0) && (optionsType.Count() == 0))" @onclick="ClearOptions">Ta bort alla val</MudButton>
    </MudItem>
</MudGrid>

<p>@errorMessage</p>




@code {

    public List<CityDTO> crimeList = new();
    public List<CityDTO> filteredCrimeList = new();

    private string valueCity { get; set; } = "Nothing selected";
    private IEnumerable<string> optionsCity { get; set; } = new HashSet<string>() { };
    private string valueType { get; set; } = "Nothing selected";
    private IEnumerable<string> optionsType { get; set; } = new HashSet<string>() { };
    private string selectedCities { get; set; } = "";
    private string selectedTypes { get; set; } = "";
    private string errorMessage = "";

    string[] swedishCities = {
    "Ale",
    "Alingsås",
    "Alvesta",
    "Aneby",
    "Arboga",
    "Arjeplog",
    "Arvidsjaur",
    "Arvika",
    "Askersund",
    "Avesta",
    "Bengtsfors",
    "Berg",
    "Bjurholm",
    "Bjuv",
    "Boden",
    "Bollebygd",
    "Bollnäs",
    "Borgholm",
    "Borlänge",
    "Borås",
    "Botkyrka",
    "Boxholm",
    "Bromölla",
    "Bräcke",
    "Burlöv",
    "Båstad",
    "Dals-Ed",
    "Danderyd",
    "Degerfors",
    "Dorotea",
    "Eda",
    "Ekerö",
    "Eksjö",
    "Emmaboda",
    "Enköping",
    "Eskilstuna",
    "Eslöv",
    "Essunga",
    "Fagersta",
    "Falkenberg",
    "Falköping",
    "Falun",
    "Filipstad",
    "Finspång",
    "Flen",
    "Forshaga",
    "Färgelanda",
    "Gagnef",
    "Gislaved",
    "Gnesta",
    "Gnosjö",
    "Gotland",
    "Grums",
    "Grästorp",
    "Gullspång",
    "Gällivare",
    "Gävle",
    "Göteborg",
    "Götene",
    "Habo",
    "Hagfors",
    "Hallsberg",
    "Hallstahammar",
    "Halmstad",
    "Hammarö",
    "Haninge",
    "Haparanda",
    "Heby",
    "Hedemora",
    "Helsingborg",
    "Herrljunga",
    "Hjo",
    "Hofors",
    "Huddinge",
    "Hudiksvall",
    "Hultsfred",
    "Hylte",
    "Håbo",
    "Hällefors",
    "Härjedalen",
    "Härnösand",
    "Härryda",
    "Hässleholm",
    "Höganäs",
    "Högsby",
    "Hörby",
    "Höör",
    "Jokkmokk",
    "Järfälla",
    "Jönköping",
    "Kalix",
    "Kalmar",
    "Karlsborg",
    "Karlshamn",
    "Karlskoga",
    "Karlskrona",
    "Karlstad",
    "Katrineholm",
    "Kil",
    "Kinda",
    "Kiruna",
    "Klippan",
    "Knivsta",
    "Kramfors",
    "Kristianstad",
    "Kristinehamn",
    "Krokom",
    "Kumla",
    "Kungsbacka",
    "Kungsör",
    "Kungälv",
    "Kävlinge",
    "Köping",
    "Laholm",
    "Landskrona",
    "Laxå",
    "Lekeberg",
    "Leksand",
    "Lerum",
    "Lessebo",
    "Lidingö",
    "Lidköping",
    "Lilla Edet",
    "Lindesberg",
    "Linköping",
    "Ljungby",
    "Ljusdal",
    "Ljusnarsberg",
    "Lomma",
    "Ludvika",
    "Luleå",
    "Lund",
    "Lycksele",
    "Lysekil",
    "Lärbro",
    "Länghem",
    "Löddeköpinge",
    "Malmö",
    "Malung-Sälen",
    "Mariestad",
    "Mark",
    "Markaryd",
    "Mellerud",
    "Mjölby",
    "Mora",
    "Motala",
    "Mullsjö",
    "Munkedal",
    "Munkfors",
    "Mölndal",
    "Mönsterås",
    "Mörbylånga",
    "Nacka",
    "Nora",
    "Norberg",
    "Nordanstig",
    "Nordmaling",
    "Norrköping",
    "Norrtälje",
    "Norsjö",
    "Nybro",
    "Nykvarn",
    "Nyköping",
    "Nynäshamn",
    "Nässjö",
    "Ockelbo",
    "Olofström",
    "Orsa",
    "Osby",
    "Oskarshamn",
    "Ovanåker",
    "Oxelösund",
    "Pajala",
    "Partille",
    "Perstorp",
    "Piteå",
    "Ragunda",
    "Robertsfors",
    "Ronneby",
    "Rättvik",
    "Sala",
    "Salem",
    "Sandviken",
    "Sigtuna",
    "Simrishamn",
    "Sjöbo",
    "Skara",
    "Skellefteå",
    "Skinnskatteberg",
    "Skurup",
    "Skövde",
    "Smedjebacken",
    "Sollefteå",
    "Sollentuna",
    "Solna",
    "Sorsele",
    "Sotenäs",
    "Staffanstorp",
    "Stenungsund",
    "Stockholm",
    "Storfors",
    "Storuman",
    "Strängnäs",
    "Strömstad",
    "Strömsund",
    "Sundbyberg",
    "Sundsvall",
    "Sunne",
    "Surahammar",
    "Svalöv",
    "Svedala",
    "Svenljunga",
    "Säffle",
    "Säter",
    "Sävsjö",
    "Söderhamn",
    "Söderköping",
    "Södertälje",
    "Sölvesborg",
    "Tanum",
    "Tibro",
    "Tidaholm",
    "Tierp",
    "Timrå",
    "Tingsryd",
    "Tjörn",
    "Tomelilla",
    "Torsby",
    "Torsås",
    "Tranemo",
    "Tranås",
    "Trelleborg",
    "Trollhättan",
    "Trosa",
    "Tyresö",
    "Täby",
    "Töreboda",
    "Uddevalla",
    "Ulricehamn",
    "Umeå",
    "Upplands Väsby",
    "Upplands-Bro",
    "Uppsala",
    "Vadstena",
    "Vaggeryd",
    "Valdemarsvik",
    "Vallentuna",
    "Vansbro",
    "Vara",
    "Varberg",
    "Vaxholm",
    "Vellinge",
    "Vetlanda",
    "Vimmerby",
    "Vindeln",
    "Vingåker",
    "Vårgårda",
    "Vänersborg",
    "Vännäs",
    "Värmdö",
    "Värnamo",
    "Västervik",
    "Västerås",
    "Växjö",
    "Ydre",
    "Ystad",
    "Åmål",
    "Ånge",
    "Åre",
    "Årjäng",
    "Åsele",
    "Åstorp",
    "Åtvidaberg",
    "Älmhult",
    "Älvdalen",
    "Älvkarleby",
    "Älvsbyn",
    "Ängelholm",
    "Öckerö",
    "Ödeshög",
    "Örebro",
    "Örkelljunga",
    "Örnsköldsvik",
    "Östersund",
    "Österåker",
    "Östhammar",
    "Östra Göinge"
};
    string[] typeOfCrimes = new string[]
    {
    "Arbetsplatsolycka",
    "Bedrägeri",
    "Bombhot",
    "Brand",
    "Bråk",
    "Detonation",
    "Djur",
    "Ekobrott",
    "Farligt föremål",
    "Fjällräddning",
    "Fylleri/LOB",
    "Förfalskningsbrott",
    "Försvunnen person",
    "Gränskontroll",
    "Häleri",
    "Inbrott",
    "Knivlagen",
    "Kontroll person/fordon",
    "Larm",
    "Lagen om hundar och katter",
    "Luftfartslagen",
    "Miljöbrott",
    "Missbruk",
    "Misshandel",
    "Mord/dråp",
    "Motorfordon",
    "Narkotikabrott",
    "Naturkatastrof",
    "Ofog",
    "Ofredande",
    "Olaga frihetsberövande",
    "Olaga hot",
    "Olaga intrång",
    "Olovlig körning",
    "Ordningslagen",
    "Olycksfall",
    "Polisinsats",
    "Rattfylleri",
    "Rån",
    "Räddningsinsats",
    "Sedlighetsbrott",
    "Sjukdom",
    "Sjölagen",
    "Skadegörelse",
    "Skottlossning",
    "Spridning smittsamma kemikalier",
    "Stöld",
    "Tillfälligt obemannat",
    "Trafikbrott",
    "Trafikhinder",
    "Trafikkontroll",
    "Trafikolycka",
    "Vapenlagen",
    "Varningslarm",
    "Våld",
    "Våldtäkt"
    };

    private bool _processing = false;

    [Parameter]
    public EventCallback<List<CityDTO>> crimeListChanged { get; set; }

    private async Task GettingAllCrimesFromSelectedCities()
    {
        try
        {
            _processing = true;
            selectedCities = string.Join(";", optionsCity);
            string apiSecret = Environment.GetEnvironmentVariable("Function_default_key");
            string functionName = Environment.GetEnvironmentVariable("Function_app_name");
            var res = await client.GetAsync($"https://{functionName}.azurewebsites.net/api/City?code={apiSecret}&searchWord={selectedCities}");
            var content = await res.Content.ReadAsStringAsync();
            crimeList = JsonConvert.DeserializeObject<List<CityDTO>>(content);
            _processing = false;
            if (crimeList is not null)
            {
                FilterCrimesList();
                errorMessage = "";
            }
            else
            {
              errorMessage = res.ReasonPhrase;                
            }
        }
        catch (Exception e)
        {
            crimeList = null;
            _processing = false;
            errorMessage = "Sökning misslyckades!, " + e.Message;
        }
    }

    private async Task FilterCrimesList()
    {
        var selectedTypesArray = optionsType.ToArray();

        if (selectedTypesArray.Length > 0)
        {
            filteredCrimeList = crimeList
                .Where(crime => selectedTypesArray.Any(type => crime.Type.Contains(type)))
                .ToList();

            await crimeListChanged.InvokeAsync(filteredCrimeList);
        }
        else
        {
            await crimeListChanged.InvokeAsync(crimeList);
        }

    }

    private void ClearOptions()
    {
        optionsCity = new HashSet<string>();
        optionsType = new HashSet<string>();
        valueCity = "Nothing selected";
        valueType = "Nothing selected";
    }

}
